package com.example.hazmatapp.Model

import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.ktx.auth
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase

class FirebaseRepository {

    private val database = Firebase.database.reference // Database reference
    private lateinit var auth: FirebaseAuth // Firebase authenticator reference
    private val usersPath = database.child("users") // Creates a parent node in the JSON file

    fun addUser(user: User) {
        val path = user.id?.let { usersPath.child(it) } // Creates path to new user child using firebase authenticator id

        path?.setValue(user)?.addOnSuccessListener {
            Log.d("Firestore", "User added successfully with ID: $user.id")
        }?.addOnFailureListener { e ->
            Log.w("Firestore", "Error adding user", e)
        }
    }
    fun addReading(reading: Methane){
        auth = Firebase.auth
        val currentUserID = auth.currentUser?.uid
        Log.d("FR", "$currentUserID")

        // Create a path for the new reading in the form users -> currentUser -> readings -> newReading
        val path = currentUserID?.let { database.child("users").child(it).child("readings").push() }

        val newKey = path?.key // the ID generated by the path
        reading.id = newKey // Adds the ID to the reading to be able to retrieve it later on

        path?.setValue(reading)?.addOnSuccessListener {
            Log.d("Firestore", "User added successfully with ID: $currentUserID.id")
        }?.addOnFailureListener { e ->
            Log.w("Firestore", "Error adding user", e)
        }

    }

}